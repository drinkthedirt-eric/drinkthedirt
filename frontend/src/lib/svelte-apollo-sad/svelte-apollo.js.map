{"version":3,"file":"svelte-apollo.js","sources":["../src/context.ts","../src/mutation.ts","../src/observable.ts","../src/restore.ts","../src/query.ts","../src/subscribe.ts"],"sourcesContent":["import type { ApolloClient } from \"@apollo/client/core/index.js\";\nimport { getContext, setContext } from \"svelte\";\n\nconst CLIENT = typeof Symbol !== \"undefined\" ? Symbol(\"client\") : \"@@client\";\n\nexport function getClient<TCache = any>(): ApolloClient<TCache> {\n\tconst client = getContext(CLIENT);\n\n\tif (!client) {\n\t\tthrow new Error(\n\t\t\t\"ApolloClient has not been set yet, use setClient(new ApolloClient({ ... })) to define it\"\n\t\t);\n\t}\n\n\treturn client as ApolloClient<TCache>;\n}\n\nexport function setClient<TCache = any>(client: ApolloClient<TCache>): void {\n\tsetContext(CLIENT, client);\n}\n","import type { FetchResult, MutationOptions } from \"@apollo/client/core/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { getClient } from \"./context\";\n\nexport type MutateOptions<T = unknown, TVariables = unknown> = Omit<\n\tMutationOptions<T, TVariables>,\n\t\"mutation\"\n>;\n\nexport type Mutate<T = unknown, TVariables = unknown> = (\n\toptions: MutateOptions<T, TVariables>\n) => Promise<FetchResult<T>>;\n\nexport function mutation<T = unknown, TVariables = unknown>(\n\tmutation: DocumentNode,\n\tinitialOptions: MutateOptions<T, TVariables> = {}\n): Mutate<T, TVariables> {\n\tconst client = getClient();\n\n\treturn (options: MutateOptions<T, TVariables>) =>\n\t\tclient.mutate({ mutation, ...initialOptions, ...options });\n}\n","import { ApolloError } from \"@apollo/client/core/index.js\";\nimport type {\n\tFetchResult,\n\tObservable,\n\tObservableQuery,\n} from \"@apollo/client/core/index.js\";\nimport { readable } from \"svelte/store\";\nimport type { Readable } from \"svelte/store\";\n\n// Match Apollo's hook approach, by returning a result with three states:\n// loading, error, or data (where data could be null / undefined)\n\nexport interface LoadingState {\n\tloading: true;\n\tdata?: undefined;\n\terror?: undefined;\n}\nexport interface ErrorState {\n\tloading: false;\n\tdata?: undefined;\n\terror: ApolloError | Error;\n}\nexport interface DataState<TData = unknown> {\n\tloading: false;\n\tdata: TData | null | undefined;\n\terror?: undefined;\n}\n\nexport type Result<TData = unknown> =\n\t| LoadingState\n\t| ErrorState\n\t| DataState<TData>;\n\n// Some methods, e.g. subscription, use Observable<FetchResult>,\n// convert this more raw value to a readable\n\nexport type ReadableResult<TData = unknown> = Readable<Result<TData>>;\n\nexport function observableToReadable<TData = unknown>(\n\tobservable: Observable<FetchResult<TData>>,\n\tinitialValue: Result<TData> = {\n\t\tloading: true,\n\t\tdata: undefined,\n\t\terror: undefined,\n\t}\n): ReadableResult<TData> {\n\tconst store = readable<Result<TData>>(initialValue, (set) => {\n\t\tconst skipDuplicate = initialValue?.data !== undefined;\n\t\tlet skipped = false;\n\n\t\tconst subscription = observable.subscribe(\n\t\t\t(result: FetchResult<TData>) => {\n\t\t\t\tif (skipDuplicate && !skipped) {\n\t\t\t\t\tskipped = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (result.errors) {\n\t\t\t\t\tconst error = new ApolloError({ graphQLErrors: result.errors });\n\t\t\t\t\tset({ loading: false, data: undefined, error });\n\t\t\t\t} else {\n\t\t\t\t\tset({ loading: false, data: result.data, error: undefined });\n\t\t\t\t}\n\t\t\t},\n\t\t\t(error: any) =>\n\t\t\t\tset({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tdata: undefined,\n\t\t\t\t\terror: error && \"message\" in error ? error : new Error(error),\n\t\t\t\t})\n\t\t);\n\n\t\treturn () => subscription.unsubscribe();\n\t});\n\n\treturn store;\n}\n\n// For live queries, ObservableQuery is used, adding methods like refetch\n// extend readable with these methods\n\nexport interface ObservableQueryExtensions<TData = unknown> {\n\tfetchMore: ObservableQuery<TData>[\"fetchMore\"];\n\tgetCurrentResult: ObservableQuery<TData>[\"getCurrentResult\"];\n\tgetLastError: ObservableQuery<TData>[\"getLastError\"];\n\tgetLastResult: ObservableQuery<TData>[\"getLastResult\"];\n\tisDifferentFromLastResult: ObservableQuery<TData>[\"isDifferentFromLastResult\"];\n\trefetch: ObservableQuery<TData>[\"refetch\"];\n\tresetLastResults: ObservableQuery<TData>[\"resetLastResults\"];\n\tresetQueryStoreErrors: ObservableQuery<TData>[\"resetQueryStoreErrors\"];\n\tresult: ObservableQuery<TData>[\"result\"];\n\tsetOptions: ObservableQuery<TData>[\"setOptions\"];\n\tsetVariables: ObservableQuery<TData>[\"setVariables\"];\n\tstartPolling: ObservableQuery<TData>[\"startPolling\"];\n\tstopPolling: ObservableQuery<TData>[\"stopPolling\"];\n\tsubscribeToMore: ObservableQuery<TData>[\"subscribeToMore\"];\n\tupdateQuery: ObservableQuery<TData>[\"updateQuery\"];\n}\n\nexport const extensions: Array<keyof ObservableQueryExtensions> = [\n\t\"fetchMore\",\n\t\"getCurrentResult\",\n\t\"getLastError\",\n\t\"getLastResult\",\n\t\"isDifferentFromLastResult\",\n\t\"refetch\",\n\t\"resetLastResults\",\n\t\"resetQueryStoreErrors\",\n\t\"result\",\n\t\"setOptions\",\n\t\"setVariables\",\n\t\"startPolling\",\n\t\"stopPolling\",\n\t\"subscribeToMore\",\n\t\"updateQuery\",\n];\n\nexport type ReadableQuery<TData> = ReadableResult<TData> &\n\tObservableQueryExtensions<TData>;\n\nexport function observableQueryToReadable<\n\tTData = unknown,\n\tTVariables = unknown\n>(\n\tquery: ObservableQuery<TData, TVariables>,\n\tinitialValue?: Result<TData>\n): ReadableQuery<TData> {\n\tconst store = observableToReadable(\n\t\tquery,\n\t\tinitialValue\n\t) as ReadableQuery<TData>;\n\n\tfor (const extension of extensions) {\n\t\tstore[extension] = query[extension].bind(query) as any;\n\t}\n\n\treturn store;\n}\n","import type {\n\tApolloClient,\n\tDataProxy,\n\tOperationVariables,\n} from \"@apollo/client/core/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { onMount } from \"svelte\";\nimport { getClient } from \"./context\";\n\nexport type Restoring<TCache> =\n\t| WeakSet<ApolloClient<TCache>>\n\t| Set<ApolloClient<TCache>>;\n\nexport const restoring: Restoring<unknown> =\n\ttypeof WeakSet !== \"undefined\" ? new WeakSet() : new Set();\n\nexport function restore<TData = unknown, TVariables = OperationVariables>(\n\tquery: DocumentNode,\n\toptions: Omit<DataProxy.WriteQueryOptions<TData, TVariables>, \"query\">\n): void {\n\tconst client = getClient();\n\n\trestoring.add(client);\n\tafterHydrate(() => restoring.delete(client));\n\n\tclient.writeQuery({ query, ...options });\n}\n\nfunction afterHydrate(callback: () => void): void {\n\t// Attempt to wait for onMount (hydration of current component is complete),\n\t// but if that fails (e.g. outside of component initialization)\n\t// wait for next event loop for hydrate to complete\n\n\ttry {\n\t\tonMount(callback);\n\t} catch (_error) {\n\t\tsetTimeout(callback, 1);\n\t}\n}\n","import type { WatchQueryOptions } from \"@apollo/client/core/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { getClient } from \"./context\";\nimport { DataState, observableQueryToReadable } from \"./observable\";\nimport type { ReadableQuery } from \"./observable\";\nimport { restoring } from \"./restore\";\n\nexport function query<TData = unknown, TVariables = unknown>(\n\tquery: DocumentNode,\n\toptions: Omit<WatchQueryOptions<TVariables, TData>, \"query\"> = {}\n): ReadableQuery<TData> {\n\tconst client = getClient();\n\tconst queryOptions = { ...options, query } as WatchQueryOptions<\n\t\tTVariables,\n\t\tTData\n\t>;\n\n\t// If client is restoring (e.g. from SSR), attempt synchronous readQuery first\n\tlet initialValue: TData | undefined;\n\tif (restoring.has(client)) {\n\t\ttry {\n\t\t\t// undefined = skip initial value (not in cache)\n\t\t\tinitialValue = client.readQuery(queryOptions) || undefined;\n\t\t} catch (err) {\n\t\t\t// Ignore preload errors\n\t\t}\n\t}\n\n\tconst observable = client.watchQuery<TData, TVariables>(queryOptions);\n\tconst store = observableQueryToReadable(\n\t\tobservable,\n\t\tinitialValue !== undefined\n\t\t\t? ({\n\t\t\t\t\tdata: initialValue,\n\t\t\t  } as DataState<TData>)\n\t\t\t: undefined\n\t);\n\n\treturn store;\n}\n","import type { SubscriptionOptions } from \"@apollo/client/core/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { getClient } from \"./context\";\nimport { observableToReadable } from \"./observable\";\nimport type { ReadableResult } from \"./observable\";\n\nexport function subscribe<TData = unknown, TVariables = unknown>(\n\tquery: DocumentNode,\n\toptions: Omit<SubscriptionOptions<TVariables>, \"query\"> = {}\n): ReadableResult<TData> {\n\tconst client = getClient();\n\tconst observable = client.subscribe<TData, TVariables>({ query, ...options });\n\n\treturn observableToReadable<TData>(observable);\n}\n"],"names":[],"mappings":"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"}